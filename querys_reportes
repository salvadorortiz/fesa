CREATE OR REPLACE VIEW dt_repo_reserva AS
SELECT com.complejo_id, can.cancha_id, recan.reserva_cancha_id, res.reserva_id, fpag.forma_pago_id, 
 	to_char(recan.fecha, 'YYYY-MM-DD') as fecha_reserva, 
CASE
	WHEN c.cliente_id IS NOT NULL THEN COALESCE( c.nombre, '' )
	ELSE COALESCE( e.nombre, '' )
END AS info_cliente,
res.nombre_evento,
CASE 
	WHEN res.estado = 'C' THEN '<span class="label label-primary">Confirmado</span>'
	WHEN res.estado = 'T' THEN '<span class="label label-default">Tentativo</span>'
	WHEN res.estado = 'R' THEN '<span class="label label-success">Realizado</span>'
	WHEN res.estado = 'N' THEN '<span class="label label-danger">No realizado</span>'
END AS estado_reserva,
fpag.nombre AS nombre_formapago,
ta.nombre AS nombre_tipoalquiler,
ff.nombre AS nombre_formafacturacion,
CASE 
	WHEN res.forma_pago_id = 1 THEN '$'||to_char(res.precio, '9G999.99')
	ELSE ''
END AS precio_reserva
--SELECT * 
FROM modulo_1_complejo com
INNER JOIN modulo_1_cancha can ON can.complejo_id = com.complejo_id
INNER JOIN modulo_1_reservacancha recan ON recan.cancha_id=can.cancha_id
INNER JOIN modulo_1_reserva res ON res.reserva_id=recan.reserva_id
INNER JOIN modulo_1_formapago fpag ON fpag.forma_pago_id=res.forma_pago_id
INNER JOIN modulo_1_formafacturacion ff ON ff.forma_facturacion_id = res.forma_facturacion_id
INNER JOIN modulo_1_tipoalquiler ta ON ta.tipo_alquiler_id = res.tipo_alquiler_id
LEFT JOIN modulo_1_cliente c ON c.cliente_id=res.cliente_id
LEFT JOIN modulo_1_empresa e ON e.empresa_id=res.empresa_id
ORDER BY recan.fecha DESC


CREATE OR REPLACE VIEW dt_repo_clientes AS 
 SELECT '<i class="fa fa-child"></i>'::text AS tipo,
    c.nombre AS nombre_cliente,
    c.ingresado_por,
    ( SELECT modulo_1_reserva.nombre_evento || ' ('|| modulo_1_reserva.fecha_ingreso|| ')'
           FROM modulo_1_reserva
          WHERE modulo_1_reserva.cliente_id = c.cliente_id
          ORDER BY modulo_1_reserva.fecha_ingreso
         LIMIT 1) AS primer_evento,
    ( SELECT modulo_1_reserva.nombre_evento|| ' ('|| modulo_1_reserva.fecha_ingreso|| ')'
           FROM modulo_1_reserva
          WHERE modulo_1_reserva.cliente_id = c.cliente_id
          ORDER BY modulo_1_reserva.fecha_ingreso DESC
         LIMIT 1) AS ultimo_evento,
    1 as tipo_tabla,
    '<button name="ver_eventos" class="btn btn-xs btn-warning"><i class="fa fa-eye bigger-120"></i></button>' as boton,
    cliente_id as id
   FROM modulo_1_cliente c
UNION
 SELECT '<i class="fa fa-building"></i>'::text AS tipo,
    c.nombre AS nombre_cliente,
    c.ingresado_por,
    ( SELECT modulo_1_reserva.nombre_evento || ' ('|| modulo_1_reserva.fecha_ingreso|| ')'
           FROM modulo_1_reserva
          WHERE modulo_1_reserva.empresa_id = c.empresa_id
          ORDER BY modulo_1_reserva.fecha_ingreso
         LIMIT 1) AS primer_evento,
    ( SELECT modulo_1_reserva.nombre_evento || ' ('|| modulo_1_reserva.fecha_ingreso|| ')'
           FROM modulo_1_reserva
          WHERE modulo_1_reserva.empresa_id = c.empresa_id
          ORDER BY modulo_1_reserva.fecha_ingreso DESC
         LIMIT 1) AS ultimo_evento,
    2 as tipo_tabla,
    '<button name="ver_eventos" class="btn btn-xs btn-warning"><i class="fa fa-eye bigger-120"></i></button>' as boton,
    empresa_id as id
   FROM modulo_1_empresa c;




CREATE OR REPLACE VIEW dt_repo_remesa AS 
 SELECT res.reserva_id,
    to_char(res.fecha_ingreso::timestamp with time zone, 'YYYY-MM-DD'::text) AS fecha_ingreso,
    res.nombre_evento,
        CASE
            WHEN c.cliente_id IS NULL THEN e.nombre
            ELSE c.nombre
        END AS nombre_cliente,
    u.nombre AS nombre_usuario,
    '$'::text || COALESCE(to_char(res.precio, '9G999.99'::text), to_char(0, '9G999.99'::text)) AS precio,
    '$'::text || COALESCE(to_char(res.costo, '9G999.99'::text), to_char(0, '9G999.99'::text)) AS costo,
    '$'::text || COALESCE(to_char(res.precio - res.costo, '9G999.99'::text), to_char(0, '9G999.99'::text)) AS utilidad,
    '$'::text || COALESCE(to_char(( SELECT sum(modulo_1_remesaxreserva.monto) AS sum
           FROM modulo_1_remesaxreserva
          WHERE modulo_1_remesaxreserva.reserva_id = res.reserva_id), '9G999.99'::text), to_char(0, '9G999.99'::text)) AS remesado,
    '$'::text || COALESCE(to_char(res.precio - (( SELECT sum(modulo_1_remesaxreserva.monto) AS sum
           FROM modulo_1_remesaxreserva
          WHERE modulo_1_remesaxreserva.reserva_id = res.reserva_id)), '9G999.99'::text), to_char(0, '9G999.99'::text)) AS remanente,
    res.usuario_id AS usuario
--SELECT *
   FROM modulo_1_remesaxreserva rr
     RIGHT JOIN modulo_1_reserva res ON  rr.reserva_id=res.reserva_id
     INNER JOIN modulo_1_usuario u ON res.usuario_id=u.usuario_id 
     LEFT JOIN modulo_1_cliente c ON res.cliente_id = c.cliente_id
     LEFT JOIN modulo_1_empresa e ON res.empresa_id = e.empresa_id
  GROUP BY res.reserva_id, c.cliente_id, e.nombre, res.nombre_evento, res.usuario_id, u.nombre;
  
  
Create or replace view dt_repo_cliente_eventos as
SELECT 
case 
	when cliente_id is null then 2
	else 1
end as tipo_registro,
case
	when cliente_id is null then empresa_id
	else cliente_id
end as id_registro, nombre_evento,
'$' || COALESCE(to_char(precio, '9G999.99'), to_char(0, '9G999.99')) as precio,
to_char(fecha_ingreso, 'YYYY-MM-DD') AS fecha_reserva
FROM modulo_1_reserva
order by fecha_ingreso desc;
